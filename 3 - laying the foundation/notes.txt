
Adding scripts in package.json file - 

In a React project, the scripts section of package.json defines shortcuts for running commands. When you type npm run <script-name> or yarn <script-name>, it executes the corresponding command.


ex - 

  "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html",
    "test": "jest"
  },
  
  
  we can run above scripts using below commands - 
  
  npm run start
  npm run build
  npm run test.
  
  
  Below creates the heading object and when it is rendered then it will be converted into the html tag element - 
  
  const heading = React.createElement("h1", { id: "title" }, "This is h1 tag");
  
  
  
  JSX - 
  
  JSX is a syntax extension for JavaScript used in React.
  
  const element = <h1>Hello, Farmer!</h1>;


	Above line will be converted into below by parcel and this process is called transapilation - 
	
	const element = React.createElement("h1", null, "Hello, Farmer!");



How jsx runs - 

JSX is transpiled by parcel.
React.createElement returns a plain JavaScript object
React DOM renders the element


JSX examples - 


1. Basic JSX
const element = <h1>Hello, React!</h1>;


Here <h1>Hello, React!</h1> is JSX, which React turns into JavaScript calls like React.createElement.

2. Embedding JavaScript expressions
const name = "Farmer";
const element = <h2>Welcome, {name}!</h2>;


The {} braces let you put JS variables, functions, or expressions inside JSX.

3. Using JSX inside a component
function Greeting() {
  return <p>This is a React component with JSX!</p>;
}

4. Adding attributes in JSX
const element = <img src="logo.png" alt="App Logo" width="100" />;


Notice: in JSX, attributes use camelCase (className instead of class, onClick instead of onclick).

5. Conditional rendering with JSX
const isLoggedIn = true;

const element = (
  <div>
    {isLoggedIn ? <h3>Welcome back!</h3> : <h3>Please sign in.</h3>}
  </div>
);

6. JSX with lists
const crops = ["Wheat", "Rice", "Corn"];

const element = (
  <ul>
    {crops.map((crop, index) => (
      <li key={index}>{crop}</li>
    ))}
  </ul>
);

7. Event handling in JSX
function Button() {
  const handleClick = () => {
    alert("Button clicked!");
  };

  return <button onClick={handleClick}>Click Me</button>;
}

8. JSX fragments (grouping elements without extra divs)
const element = (
  <>
    <h1>Farm Management</h1>
    <p>Track your expenses and earnings here.</p>
  </>
);


1. Conditional Rendering with Multiple Cases
function StatusMessage({ status }) {
  return (
    <div>
      {status === "loading" && <p>Loading data...</p>}
      {status === "success" && <p style={{ color: "green" }}>Data loaded!</p>}
      {status === "error" && <p style={{ color: "red" }}>Something went wrong.</p>}
    </div>
  );
}

2. JSX with Nested Components and Props
function Crop({ name, area }) {
  return (
    <div>
      <h3>{name}</h3>
      <p>Area: {area} acres</p>
    </div>
  );
}

function Farm() {
  return (
    <div>
      <h2>My Farm</h2>
      <Crop name="Wheat" area={10} />
      <Crop name="Rice" area={5} />
    </div>
  );
}

3. Dynamic Styling with JSX
function Expense({ type, amount }) {
  const style = {
    color: amount > 1000 ? "red" : "green",
    fontWeight: "bold",
  };

  return <p style={style}>{type}: ₹{amount}</p>;
}

4. JSX with Inline Functions
function ActionButtons() {
  return (
    <div>
      <button onClick={() => alert("Liked!")}>Like</button>
      <button onClick={() => alert("Shared!")}>Share</button>
    </div>
  );
}

5. Rendering a Table with JSX
const crops = [
  { name: "Wheat", yield: 200 },
  { name: "Corn", yield: 150 },
  { name: "Rice", yield: 300 },
];

function CropTable() {
  return (
    <table border="1">
      <thead>
        <tr>
          <th>Crop</th>
          <th>Yield (kg)</th>
        </tr>
      </thead>
      <tbody>
        {crops.map((crop, index) => (
          <tr key={index}>
            <td>{crop.name}</td>
            <td>{crop.yield}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

6. JSX with Children Props
function Card({ title, children }) {
  return (
    <div style={{ border: "1px solid gray", padding: "10px", margin: "10px" }}>
      <h3>{title}</h3>
      {children}
    </div>
  );
}

function Dashboard() {
  return (
    <div>
      <Card title="Expenses">
        <p>Fertilizer: ₹2000</p>
        <p>Labor: ₹1500</p>
      </Card>
      <Card title="Earnings">
        <p>Wheat: ₹5000</p>
      </Card>
    </div>
  );
}

7. Complex JSX with Conditional + List + Events
function CropList({ crops }) {
  if (crops.length === 0) {
    return <p>No crops available</p>;
  }

  return (
    <ul>
      {crops.map((crop, index) => (
        <li key={index}>
          {crop.name} - {crop.area} acres
          <button onClick={() => alert(`Viewing ${crop.name}`)}>View</button>
        </li>
      ))}
    </ul>
  );
}

function FarmDashboard() {
  const myCrops = [
    { name: "Wheat", area: 10 },
    { name: "Rice", area: 5 },
  ];

  return (
    <div>
      <h2>Farm Dashboard</h2>
      <CropList crops={myCrops} />
    </div>
  );
}


using arrow function - 

1. Arrow Function as a Component
const Greeting = () => {
  return <h1>Hello, Farmer!</h1>;
};

2. Arrow Function with Props
const Greeting = ({ name }) => <h2>Hello, {name}!</h2>;

// Usage
<Greeting name="D J" />

3. Arrow Function with Event Handling
const Button = () => {
  const handleClick = () => {
    alert("Button clicked!");
  };

  return <button onClick={handleClick}>Click Me</button>;
};

4. Inline Arrow Function in JSX
const ActionButtons = () => (
  <div>
    <button onClick={() => alert("Liked!")}>Like</button>
    <button onClick={() => alert("Shared!")}>Share</button>
  </div>
);

5. Rendering Lists with Arrow Functions
const CropList = () => {
  const crops = ["Wheat", "Rice", "Corn"];

  return (
    <ul>
      {crops.map((crop, index) => (
        <li key={index}>{crop}</li>
      ))}
    </ul>
  );
};


Here, the .map() uses an arrow function inside JSX.

6. Conditional Rendering with Arrow Function
const StatusMessage = ({ isLoggedIn }) => (
  <div>
    {isLoggedIn ? <h3>Welcome back!</h3> : <h3>Please sign in.</h3>}
  </div>
);

7. Arrow Function Returning JSX Directly
const Expense = ({ type, amount }) => (
  <p style={{ color: amount > 1000 ? "red" : "green" }}>
    {type}: ₹{amount}
  </p>
);



Class based component - 

Class Component with State and Props
import React, { Component } from "react";

class Counter extends Component {
  // Constructor for initializing state
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }

  // Method to handle increment
  increment = () => {
    this.setState({ count: this.state.count + 1 });
  };

  // Required render method
  render() {
    return (
      <div>
        <h2>{this.props.title}</h2>
        <p>Count: {this.state.count}</p>
        <button onClick={this.increment}>Increase</button>
      </div>
    );
  }
}

export default Counter;

Usage:
<Counter title="My Counter Component" />


Rendering functional component - 


const Greeting = ({ name }) => <h1>Hello, {name}!</h1>;

App.js - 

function App() {
  return (
    <div>
      <Greeting name="Farmer" />
      <Greeting name="D J" />
    </div>
  );
}

export default App;


index.js - 

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);


 Component composition - calling one component in another component -
 
 function Header() {
  return <h1>Agripulse Dashboard</h1>;
}

function Footer() {
  return <p>© 2025 Agripulse</p>;
}

function App() {
  return (
    <div>
      <Header />
      <p>Welcome, Farmer!</p>
      <Footer />
    </div>
  );
}

with props - 

function Card({ title, content }) {
  return (
    <div style={{ border: "1px solid gray", margin: "10px", padding: "10px" }}>
      <h3>{title}</h3>
      <p>{content}</p>
    </div>
  );
}

function Dashboard() {
  return (
    <div>
      <Card title="Expenses" content="Fertilizer: ₹2000" />
      <Card title="Earnings" content="Wheat: ₹5000" />
    </div>
  );
}


